import React, { useState } from 'react';
import { View, StyleSheet } from 'react-native';
import { Modal, Portal, Text, Button, TextInput, HelperText, Switch } from 'react-native-paper';
import { apiClient } from '../../../config/api';
import { addStudent, StudentDetails } from '../../../services/studentService';
import { sendWelcomeEmail } from '../../../utils/email';

interface Props {
  visible: boolean;
  onDismiss: () => void;
  onSuccess?: () => void;
}

const StudentRegistrationModal: React.FC<Props> = ({
  visible,
  onDismiss,
  onSuccess
}) => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [mobileNo, setMobileNo] = useState('');
  const [address, setAddress] = useState('');
  const [subscriptionStart, setSubscriptionStart] = useState('');
  const [subscriptionEnd, setSubscriptionEnd] = useState('');
  const [isShiftStudent, setIsShiftStudent] = useState(false);
  const [shiftTime, setShiftTime] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [registeredStudent, setRegisteredStudent] = useState<StudentDetails | null>(null);

  const validateDate = (dateStr: string): boolean => {
    if (!/^\d{4}-\d{2}-\d{2}$/.test(dateStr)) {
      return false;
    }

    const [year, month, day] = dateStr.split('-').map(Number);
    
    // Check month range
    if (month < 1 || month > 12) {
      return false;
    }
    
    // Check day range
    const daysInMonth = new Date(year, month, 0).getDate();
    if (day < 1 || day > daysInMonth) {
      return false;
    }
    
    // Check if date is not in the past
    const inputDate = new Date(year, month - 1, day);
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    return inputDate >= today;
  };

  const validateForm = () => {
    if (!name) return 'Name is required';
    if (!email) return 'Email is required';
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) return 'Invalid email format';
    if (!mobileNo) return 'Mobile number is required';
    if (!/^\d{10}$/.test(mobileNo)) return 'Mobile number must be 10 digits';
    if (!address) return 'Address is required';
    if (!subscriptionStart) return 'Subscription start date is required';
    if (!validateDate(subscriptionStart)) return 'Invalid start date format (YYYY-MM-DD) or past date';
    if (!subscriptionEnd) return 'Subscription end date is required';
    if (!validateDate(subscriptionEnd)) return 'Invalid end date format (YYYY-MM-DD) or past date';

    if (isShiftStudent && !shiftTime) {
      return 'Shift time is required for shift students';
    }

    return '';
  };

  const handleSubmit = async () => {
    try {
      const validationError = validateForm();
      if (validationError) {
        setError(validationError);
        return;
      }

      setLoading(true);
      setError('');

      // Set initial subscription status
      const startDate = new Date(subscriptionStart);
      const endDate = new Date(subscriptionEnd);
      const subscription_status = endDate >= new Date() ? 'Active' as const : 'Expired' as const;

      // Add student to database using the new endpoint
      const studentData: Omit<StudentDetails, 'admin_id'> = {
        auth_user_id: '', // This will be generated by the backend
        name: name.trim(),
        email: email.trim().toLowerCase(),
        mobile_no: mobileNo.trim(),
        address: address.trim(),
        subscription_start: startDate.toISOString(),
        subscription_end: endDate.toISOString(),
        subscription_status,
        is_shift_student: isShiftStudent,
        shift_time: shiftTime?.trim() || null,
        status: 'Absent' as const,
        last_visit: null
      };

      const student = await addStudent(studentData);

      // Send welcome email
      const emailSent = await sendWelcomeEmail(
        email,
        name,
        student.auth_user_id || student.student_id || '',
        mobileNo
      );

      if (!emailSent) {
        console.warn(`Failed to send welcome email to ${email}`);
        setError('Student registered successfully but failed to send welcome email');
      }

      setRegisteredStudent(student);
      if (onSuccess) onSuccess();
      onDismiss();
    } catch (error: any) {
      console.error('Error registering student:', error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Portal>
      <Modal
        visible={visible}
        onDismiss={onDismiss}
        contentContainerStyle={styles.container}
      >
        <Text style={styles.title}>Register New Student</Text>

        <TextInput
          label="Name"
          value={name}
          onChangeText={setName}
          style={styles.input}
          mode="outlined"
        />

        <TextInput
          label="Email"
          value={email}
          onChangeText={setEmail}
          keyboardType="email-address"
          autoCapitalize="none"
          style={styles.input}
          mode="outlined"
        />

        <TextInput
          label="Mobile Number"
          value={mobileNo}
          onChangeText={setMobileNo}
          keyboardType="phone-pad"
          style={styles.input}
          mode="outlined"
        />

        <TextInput
          label="Address"
          value={address}
          onChangeText={setAddress}
          multiline
          numberOfLines={3}
          style={styles.input}
          mode="outlined"
        />

        <TextInput
          label="Subscription Start Date (YYYY-MM-DD)"
          value={subscriptionStart}
          onChangeText={setSubscriptionStart}
          style={styles.input}
          mode="outlined"
          placeholder="YYYY-MM-DD"
        />

        <TextInput
          label="Subscription End Date (YYYY-MM-DD)"
          value={subscriptionEnd}
          onChangeText={setSubscriptionEnd}
          style={styles.input}
          mode="outlined"
          placeholder="YYYY-MM-DD"
        />

        <View style={styles.switchContainer}>
          <Text>Shift Student</Text>
          <Switch
            value={isShiftStudent}
            onValueChange={setIsShiftStudent}
          />
        </View>

        {isShiftStudent && (
          <TextInput
            label="Shift Time (e.g., 09:00 - 14:00)"
            value={shiftTime || ''}
            onChangeText={setShiftTime}
            style={styles.input}
            mode="outlined"
          />
        )}

        {error && (
          <HelperText type="error" visible={!!error}>
            {error}
          </HelperText>
        )}

        <View style={styles.buttonContainer}>
          <Button
            mode="outlined"
            onPress={onDismiss}
            style={styles.button}
          >
            Cancel
          </Button>
          <Button
            mode="contained"
            onPress={handleSubmit}
            loading={loading}
            disabled={loading}
            style={styles.button}
          >
            Register
          </Button>
        </View>
      </Modal>
    </Portal>
  );
};

const styles = StyleSheet.create({
  container: {
    backgroundColor: 'white',
    padding: 20,
    margin: 20,
    borderRadius: 8,
    maxHeight: '90%',
  },
  title: {
    fontSize: 24,
    marginBottom: 16,
    textAlign: 'center',
  },
  input: {
    marginBottom: 12,
  },
  switchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginVertical: 12,
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginTop: 16,
  },
  button: {
    minWidth: 120,
  },
});

export default StudentRegistrationModal;
