import React, { useState, useEffect } from 'react';
import { View, StyleSheet, ScrollView, Platform } from 'react-native';
import { TextInput, Button, HelperText, Surface, Text, useTheme, Portal, Modal, Switch, RadioButton } from 'react-native-paper';
import { getAuthToken, apiClient } from '../../../config/api';
import { addStudent } from '../../../services/studentService';
import Header from '../../common/Header';
import { NativeStackScreenProps } from '@react-navigation/native-stack';
import { AdminStackParamList } from '../../../types/navigation';

interface FormData {
  name: string;
  email: string;
  mobileNo: string;
  address: string;
  subscriptionStart: string;
  subscriptionEnd: string;
  isShiftStudent: boolean;
  shiftTime: string;
}

interface FormErrors {
  [key: string]: string;
}

interface AdminShiftConfig {
  has_shift_system: boolean;
  shift_timings: string[];
}

const SingleStudentRegistration: React.FC<NativeStackScreenProps<AdminStackParamList, 'SingleStudentRegistration'>> = ({ navigation }) => {
  const theme = useTheme();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<{ studentId: string; customId: string; mobileNo: string; email: string } | null>(null);
  const [adminShiftConfig, setAdminShiftConfig] = useState<AdminShiftConfig>({ has_shift_system: false, shift_timings: [] });
  const [formData, setFormData] = useState<FormData>({
    name: '',
    email: '',
    mobileNo: '',
    address: '',
    subscriptionStart: new Date().toISOString().split('T')[0],
    subscriptionEnd: '',
    isShiftStudent: false,
    shiftTime: ''
  });
  const [formErrors, setFormErrors] = useState<FormErrors>({});

  useEffect(() => {
    fetchAdminShiftConfig();
  }, []);

  const fetchAdminShiftConfig = async () => {
    try {
      const token = await getAuthToken();
      if (!token) return;

      const data = await apiClient.get<{
        has_shift_system: boolean;
        shift_timings: string[];
      }>('/admin/details');

      if (data) {
        setAdminShiftConfig({
          has_shift_system: data.has_shift_system,
          shift_timings: data.shift_timings || []
        });
      }
    } catch (error) {
      console.error('Error fetching admin shift config:', error);
    }
  };

  const validateForm = (): boolean => {
    const errors: FormErrors = {};

    if (!formData.name) errors.name = 'Name is required';
    if (!formData.email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      errors.email = 'Valid email is required';
    }
    if (!formData.mobileNo || !/^\d{10}$/.test(formData.mobileNo)) {
      errors.mobileNo = 'Valid 10-digit mobile number is required';
    }
    if (!formData.address) errors.address = 'Address is required';
    if (!formData.subscriptionStart || !/^\d{4}-\d{2}-\d{2}$/.test(formData.subscriptionStart)) {
      errors.subscriptionStart = 'Valid subscription start date (YYYY-MM-DD) is required';
    }
    if (!formData.subscriptionEnd || !/^\d{4}-\d{2}-\d{2}$/.test(formData.subscriptionEnd)) {
      errors.subscriptionEnd = 'Valid subscription end date (YYYY-MM-DD) is required';
    }
    if (adminShiftConfig.has_shift_system && formData.isShiftStudent && !formData.shiftTime) {
      errors.shiftTime = 'Please select a shift time';
    }

    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSubmit = async () => {
    try {
      if (!validateForm()) return;

      setLoading(true);
      setError(null);
      setSuccess(null);

      const token = await getAuthToken();
      if (!token) throw new Error('No authenticated user found');

      // Set subscription status
      const startDate = new Date(formData.subscriptionStart);
      const endDate = new Date(formData.subscriptionEnd);
      const subscription_status = endDate >= new Date() ? 'Active' as const : 'Expired' as const;

      // Add student to database using the new endpoint
      const response = await addStudent({
        auth_user_id: '', // This will be generated by the backend
        name: formData.name,
        email: formData.email,
        mobile_no: formData.mobileNo,
        address: formData.address,
        subscription_start: startDate.toISOString(),
        subscription_end: endDate.toISOString(),
        subscription_status,
        is_shift_student: adminShiftConfig.has_shift_system && formData.isShiftStudent,
        shift_time: formData.isShiftStudent ? formData.shiftTime : null,
        status: 'Absent',
        last_visit: null
      });

      setSuccess({ 
        studentId: response.user_id, 
        customId: response.student_id, 
        mobileNo: formData.mobileNo, 
        email: formData.email 
      });
      
      setFormData({
        name: '',
        email: '',
        mobileNo: '',
        address: '',
        subscriptionStart: new Date().toISOString().split('T')[0],
        subscriptionEnd: '',
        isShiftStudent: false,
        shiftTime: ''
      });
    } catch (error: any) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  const renderShiftSection = () => {
    if (!adminShiftConfig.has_shift_system) return null;

    return (
      <View style={styles.shiftSection}>
        <View style={styles.shiftHeader}>
          <Text>Is this a shift-based student?</Text>
          <Switch
            value={formData.isShiftStudent}
            onValueChange={(value) => setFormData({ ...formData, isShiftStudent: value, shiftTime: '' })}
          />
        </View>

        {formData.isShiftStudent && (
          <View style={styles.shiftTimings}>
            <Text style={styles.shiftTitle}>Select Shift Time:</Text>
            <RadioButton.Group
              onValueChange={value => setFormData({ ...formData, shiftTime: value })}
              value={formData.shiftTime}
            >
              {adminShiftConfig.shift_timings.map((shift, index) => (
                <View key={index} style={styles.radioItem}>
                  <RadioButton.Item
                    label={shift}
                    value={shift}
                    position="leading"
                    labelStyle={{ marginLeft: -16 }}
                  />
                </View>
              ))}
            </RadioButton.Group>
            {!!formErrors.shiftTime && (
              <HelperText type="error" visible={true}>
                {formErrors.shiftTime}
              </HelperText>
            )}
          </View>
        )}
      </View>
    );
  };

  return (
    <ScrollView style={styles.container}>
      <Header title="Student Registration" showBackButton onBackPress={() => navigation.goBack()} />
      
      <Surface style={styles.surface}>
        <Text style={styles.title}>Register New Student</Text>

        <TextInput
          label="Name"
          value={formData.name}
          onChangeText={(text) => setFormData({ ...formData, name: text })}
          style={styles.input}
          error={!!formErrors.name}
        />
        <HelperText type="error" visible={!!formErrors.name}>
          {formErrors.name}
        </HelperText>

        <TextInput
          label="Email"
          value={formData.email}
          onChangeText={(text) => setFormData({ ...formData, email: text })}
          keyboardType="email-address"
          style={styles.input}
          error={!!formErrors.email}
        />
        <HelperText type="error" visible={!!formErrors.email}>
          {formErrors.email}
        </HelperText>

        <TextInput
          label="Mobile Number"
          value={formData.mobileNo}
          onChangeText={(text) => setFormData({ ...formData, mobileNo: text })}
          keyboardType="phone-pad"
          style={styles.input}
          error={!!formErrors.mobileNo}
        />
        <HelperText type="error" visible={!!formErrors.mobileNo}>
          {formErrors.mobileNo}
        </HelperText>

        <TextInput
          label="Address"
          value={formData.address}
          onChangeText={(text) => setFormData({ ...formData, address: text })}
          multiline
          numberOfLines={3}
          style={styles.input}
          error={!!formErrors.address}
        />
        <HelperText type="error" visible={!!formErrors.address}>
          {formErrors.address}
        </HelperText>

        <TextInput
          label="Subscription Start Date"
          value={formData.subscriptionStart}
          onChangeText={(text) => setFormData({ ...formData, subscriptionStart: text })}
          style={styles.input}
          error={!!formErrors.subscriptionStart}
          placeholder="YYYY-MM-DD"
        />
        <HelperText type="info" visible={true}>
          Format: YYYY-MM-DD (e.g., 2025-01-15)
        </HelperText>
        <HelperText type="error" visible={!!formErrors.subscriptionStart}>
          {formErrors.subscriptionStart}
        </HelperText>

        <TextInput
          label="Subscription End Date"
          value={formData.subscriptionEnd}
          onChangeText={(text) => setFormData({ ...formData, subscriptionEnd: text })}
          style={styles.input}
          error={!!formErrors.subscriptionEnd}
          placeholder="YYYY-MM-DD"
        />
        <HelperText type="info" visible={true}>
          Format: YYYY-MM-DD (e.g., 2025-06-15)
        </HelperText>
        <HelperText type="error" visible={!!formErrors.subscriptionEnd}>
          {formErrors.subscriptionEnd}
        </HelperText>

        {renderShiftSection()}

        {error && (
          <HelperText type="error" visible={true}>
            {error}
          </HelperText>
        )}

        <Button
          mode="contained"
          onPress={handleSubmit}
          loading={loading}
          disabled={loading}
          style={styles.submitButton}
        >
          Register Student
        </Button>
      </Surface>

      <Portal>
        <Modal
          visible={!!success}
          onDismiss={() => setSuccess(null)}
          contentContainerStyle={styles.modal}
        >
          <Surface style={styles.modalContent}>
            <Text style={styles.modalTitle}>Student Registered Successfully!</Text>
            {success && (
              <>
                <Text style={styles.modalText}>Student ID: {success.customId}</Text>
                <Text style={styles.modalText}>
                  Email: {success.email}
                </Text>
                <Text style={styles.modalText}>
                  A password setup email has been sent to: {success.email}
                </Text>
                <Text style={styles.modalNote}>
                  The student will receive an email with a link to set their password.
                  They can then login using their Student ID and the password they set.
                </Text>
              </>
            )}
            <Button mode="contained" onPress={() => setSuccess(null)} style={styles.modalButton}>
              Close
            </Button>
          </Surface>
        </Modal>
      </Portal>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  surface: {
    margin: 16,
    padding: 16,
    borderRadius: 8,
    elevation: 4,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 16,
    textAlign: 'center',
  },
  input: {
    marginBottom: 4,
  },
  submitButton: {
    marginTop: 16,
  },
  shiftSection: {
    marginTop: 16,
    marginBottom: 8,
  },
  shiftHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  shiftTimings: {
    marginTop: 8,
  },
  shiftTitle: {
    fontSize: 16,
    fontWeight: '500',
    marginBottom: 8,
  },
  radioItem: {
    marginVertical: 4,
  },
  modal: {
    padding: 20,
  },
  modalContent: {
    padding: 20,
    borderRadius: 8,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 16,
    textAlign: 'center',
  },
  modalText: {
    fontSize: 16,
    marginBottom: 8,
  },
  modalNote: {
    fontSize: 14,
    fontStyle: 'italic',
    marginTop: 8,
    marginBottom: 16,
  },
  modalButton: {
    marginTop: 8,
  },
});

export default SingleStudentRegistration;
