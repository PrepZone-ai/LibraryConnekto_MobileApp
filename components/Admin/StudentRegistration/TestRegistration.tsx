import React, { useState } from 'react';
import { View, ScrollView, StyleSheet } from 'react-native';
import { Button, Text, Surface, HelperText } from 'react-native-paper';
import { apiClient } from '../../../config/api';
import { addStudent } from '../../../services/studentService';
import type { StudentDetails } from '../../../services/studentService';

const TestRegistration: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<any>(null);
  const [error, setError] = useState<string | null>(null);

  const runTest = async () => {
    try {
      setLoading(true);
      setError(null);
      setResult(null);

      // Test student details
      const testStudent = {
        name: 'Test Student',
        email: 'edgeinterns.ai+teststudent@gmail.com', // Using email plus addressing for testing
        mobile_no: '1234567890',
        address: '123 Test Street',
        subscription_start: '2025-03-12',
        subscription_end: '2025-06-12',
        is_shift_student: false,
        shift_time: null
      };

      console.log('Adding student to database...');
      const studentData: Omit<StudentDetails, 'admin_id' | 'student_id'> = {
        auth_user_id: '', // This will be generated by the backend
        name: testStudent.name,
        email: testStudent.email,
        mobile_no: testStudent.mobile_no,
        address: testStudent.address,
        subscription_start: new Date(testStudent.subscription_start).toISOString(),
        subscription_end: new Date(testStudent.subscription_end).toISOString(),
        subscription_status: 'Active',
        is_shift_student: testStudent.is_shift_student,
        shift_time: testStudent.shift_time,
        status: 'Absent',
        last_visit: null
      };

      const student = await addStudent(studentData);
      console.log('Student added successfully:', student);

      setResult({
        success: true,
        student
      });
    } catch (error: any) {
      console.error('Error in test:', error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      <ScrollView style={styles.content}>
        <Surface style={styles.surface} elevation={1}>
          <Text style={styles.title}>Test Student Registration</Text>
          
          <Button
            mode="contained"
            onPress={runTest}
            loading={loading}
            style={styles.button}
          >
            Run Test Registration
          </Button>

          {error && (
            <HelperText type="error" visible={true}>
              {error}
            </HelperText>
          )}

          {result && (
            <View style={styles.resultContainer}>
              <Text style={styles.subtitle}>Test Results:</Text>
              <Text>Student ID: {result.student.student_id}</Text>
              <Text>User ID: {result.student.user_id}</Text>
              <Text>Email: {result.student.email}</Text>
              <Text>Status: {result.success ? 'Success' : 'Failed'}</Text>
            </View>
          )}
        </Surface>
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  content: {
    padding: 16,
  },
  surface: {
    padding: 16,
    borderRadius: 8,
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 16,
  },
  subtitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginTop: 16,
    marginBottom: 8,
  },
  button: {
    marginVertical: 16,
  },
  resultContainer: {
    marginTop: 16,
    padding: 16,
    backgroundColor: '#e8f5e9',
    borderRadius: 8,
  },
});

export default TestRegistration;
